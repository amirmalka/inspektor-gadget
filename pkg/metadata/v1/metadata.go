// Copyright 2024 The Inspektor Gadget authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package metadatav1

// Tracer describes the behavior of a gadget that collects and sends events to user space
// TODO: We need to rename this concept not to collide with the opentelemetry concept
type Tracer struct {
	// Name of the perf event array or ring buffer that the gadget uses to send events
	MapName string `yaml:"mapName"`
	// Name of the structure generated by this tracer
	StructName string `yaml:"structName"`
}

// Snapshotter describes the behavior of a gadget that collects the state of a subsystem
type Snapshotter struct {
	StructName string `yaml:"structName"`
}

const (
	DefaultColumnWidth = 16
)

type Alignment string

const (
	AlignmenNone   Alignment = ""
	AlignmentLeft  Alignment = "left"
	AlignmentRight Alignment = "right"
)

type EllipsisType string

const (
	EllipsisNone   EllipsisType = ""
	EllipsisStart  EllipsisType = "start"
	EllipsisMiddle EllipsisType = "middle"
	EllipsisEnd    EllipsisType = "end"
)

// FieldAttributes describes how to format a field. It's almost 1:1 mapping with columns.Attributes,
// however we are keeping this separated because we don't want to create a strong coupling with the
// columns library now. Later on we can consider merging both of them.
type FieldAttributes struct {
	// Width to reserve for this field
	Width uint `yaml:"width,omitempty" json:"width"`
	// MinWidth is the minimum width for this field
	MinWidth uint `yaml:"minWidth,omitempty" json:"minWidth"`
	// MaxWidth is the maximum width for this field
	MaxWidth uint `yaml:"maxWidth,omitempty" json:"maxWidth"`
	// Alignment of this column (left or right)
	Alignment Alignment `yaml:"alignment,omitempty" json:"alignment"`
	// Hidden defines whether a column is to be hid by default
	Hidden bool `yaml:"hidden,omitempty" json:"hidden"`
	// EllipsisType defines how to abbreviate this column if the value needs more space than is
	// available. (start, middle or end)
	Ellipsis EllipsisType `yaml:"ellipsis,omitempty" json:"ellipsis"`
	// Template defines the template that will be used.
	// TODO: add a link to existing templates
	Template string `yaml:"template,omitempty" json:"template"`
}

type Field struct {
	// Field name
	Name string `yaml:"name" json:"name"`
	// Field description
	Description string `yaml:"description,omitempty" json:"description"`
	// Attributes defines how the field should be formatted
	Attributes FieldAttributes `yaml:"attributes" json:"attributes"`
	// Annotations represents extra information that is not relevant to Inspektor Gadget, but
	// for other applications, like color font for instance.
	Annotations map[string]interface{} `yaml:"annotations,omitempty" json:"annotations"`
	// Size, if not zero, determines that this field has a fixed size
	Size uint32 `json:"size"`
}

// Struct describes a type generated by the gadget
type Struct struct {
	Fields []Field `yaml:"fields"`
}
